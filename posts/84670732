<p><a href="https://infinitemac.org/" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">Infinite Mac</a> has supported a limited form of persistence since <a href="https://blog.persistent.info/2022/03/blog-post.html#infinite-mac-persistence" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">its initial launch</a>. This was <a href="https://github.com/mihaip/infinite-mac/commit/0899205dba8fc3104f6a4f65a1714816720fe67b" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">done</a> by exporting the contents of the “Saved” folder in “The Outside World” to IndexedDB when the emulator was shut down. While this worked, it had several limitations:</p>

<ul>
	<li>Saving was best-effort during the page unload process. The <a href="https://developer.chrome.com/blog/deprecating-unload/#:~:text=The%20beforeunload%20event,most%20unload%20replacements." rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer"><code>beforeunload</code> event</a> that it relied on does not always fire, and it required an asynchronous <code>postMessage</code> step by which point the process for the page may have been terminated.</li>
	<li>It relied on Basilisk II and SheepShaver’s ExtFS support (which creates a virtual drive using the <a href="https://www.macintoshrepository.org/2070-file-system-manager-1-2-sdk" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">File System Manager</a>). This meant that it was not available in Mini vMac-based emulators (i.e. anything for System 6 or earlier).</li>
	<li>Even when ExtFS/File System Manager is available, the virtual drive has several limitations: some software thinks it’s a networked drive and refuses to run on it, and it’s not bootable.</li>
</ul>

<p>With the <a href="https://blog.persistent.info/2023/08/infinite-mac-cd-roms.html" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">improved disk abstractions</a> that enabled remote CD-ROM support, I <a href="https://github.com/mihaip/infinite-mac/issues/152" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">realized</a> that that I could mount another hard disk image in the emulated Mac, intercept <code>read</code> and <code>write</code> calls to it, and handle them from a persisted store. This was made possible by the new-ish <a href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_API/Origin_private_file_system" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">origin private file system</a> (OPFS) API, and specifically the ability to do <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileHandle/createSyncAccessHandle" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">synchronous file operations</a> from a worker (without <a href="https://jlongster.com/future-sql-web" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">heroics</a>). It’s supported in all modern browsers, including <a href="https://webkit.org/blog/12257/the-file-system-access-api-with-origin-private-file-system/" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">WebKit-based ones</a>. The synchronous part is key because it allows all changes to be persisted as they happen, instead of during page unload.</p>

<p>The specific approach <a href="https://github.com/mihaip/infinite-mac/commit/717e26ceb83f5f1b4886521ab1cc1ca9466eaec9" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">that I settled on</a> was to have a mostly empty 1GB HFS disk image that serves as a “Saved HD”. Any modifications to it (tracked using the same 256KB chunk granularity that’s used for disk image streaming) are persisted in an OPFS file (a second file maintains the indexes of all modified chunks). The “mostly” empty part is because there is some metadata (desktop database, custom icon) as well as a Read Me file that are in the initial state of the disk image. This system makes the actual OPFS space that’s consumed to be proportional to the amount of data written, instead of ballooning to 1GB from the get go. It could also be extended to support a snapshotting/copy-on-write system down the line.</p>

<p>While OPFS is pretty broadly available, Infinite Mac still has enough visitors from older browsers that I wanted to detect support for it (the API is also not available in private Safari windows). One annoying gotcha is that the synchronous file API is only available in workers, and there’s no way to detect its presence from the main browser process. I therefore have to create <a href="https://github.com/mihaip/infinite-mac/blob/941b7e9cc81067929e3e0e880f54588eb839d3a2/src/canSaveDisks-worker.ts" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">a temporary worker</a> to check for the existence of the <code>createSyncAccessHandle</code> and related functionality. The check is done <a href="https://github.com/mihaip/infinite-mac/blob/941b7e9cc81067929e3e0e880f54588eb839d3a2/src/index.tsx#L6-L12" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">as early as possible</a> and the results are cached, so that most of the time we can synchronously determine the support level.</p>

<br/>

<p>
  <img src="https://reader.miniflux.app/proxy/KZ6s6_ianacnklaC7dKbJ7P4sdtLRHYEc9SOFBFz9cI=/aHR0cHM6Ly9wZXJzaXN0ZW50LmluZm8vaW1hZ2VzL2luZmluaXRlLW1hYy1zYXZlZC1oZC1zZXR0aW5ncy5wbmc=" width="636" height="350" alt="Settings dialog showing options to import and export the Saved HD" loading="lazy"/>
</p>

<p>With all that in place, it’s possible to use the Saved HD as a “real” disk in the emulated Mac. This enables quite a few capabilities:</p>

<ul>
	<li>You can install system software on Saved HD (either by copying it from an existing disk or via a System Software CD-ROM from the <a href="https://blog.persistent.info/2023/08/infinite-mac-cd-roms.html#infinite-mac-cd-rom-library" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">library</a>). It can then be used as a startup disk (if running <a href="https://infinitemac.org/run" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">a custom instance</a> with no other disks), allowing custom extensions and control panels to be installed and persisted across sessions.</li>
	<li>The contents can be exported and imported (from the emulator settings dialog), allowing backups and sharing across browsers and machines.</li>
	<li>The contents can also be exported to a <code>.dsk</code> disk image file, so that they can be used in Basilisk II, SheepShaver and other native emulators.</li>
	<li>The same disk is mounted in all instances, so it&#39;s also a way to move data from one to system disk to another.</li>
</ul>

<p>
  <img src="https://reader.miniflux.app/proxy/MUP4-FxP3ZIyLKSYg7JJCV6-YHmA8wp8ys1mjcb43Tg=/aHR0cHM6Ly9wZXJzaXN0ZW50LmluZm8vaW1hZ2VzL2luZmluaXRlLW1hYy1zYXZlZC1oZC5wbmc=" alt="System 7.5 install with a Kaleidoscope scheme and ResEdit editing an icon" loading="lazy"/>
  <br/>
  Your own private System 7 install
</p>

<p>The end result is a way to make Infinite Mac feel like “your Mac” while still keeping everything local and fast. That also lines up well with my goal of keeping the site a fun hobby project — while persisting disks on a server would be neat, it would also be a more expensive and complex operation.</p>