<p>We don’t frequently have CEOs on The Pragmatic Engineer: in fact, today is the first issue when we’re talking with a CEO – partially – <em>about</em> their CEO job. I’ve always wondered what it would be like to go from a developer, to eventually become the CEO of a large and growing company.</p><p>Martin Mao travelled this path: starting his first developer job at a local startup in Australia, then making the move to the US – first being at Microsoft in Seattle, then at Amazon, and then at Uber, in Silicon Valley. He’s solved interesting engineering challenges along the way, too – like building observability for Amazon’s EC2 offering, and being one of the first engineers on Uber’s observability platform. <em>We covered more on this topic in the article <a href="https://newsletter.pragmaticengineer.com/p/how-uber-built-its-observability-platform" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">How Uber built its observability platform</a>.</em></p><p>However, Martin had not written a line of production code for the last four years, as he’s taken on the role of CEO, and heads up observability scaleup Chronosphere – at more than 250 people and growing. The company supports billions of active time series across its customer fleet. Chronosphere was actually founded by two former software engineers: <a href="https://www.linkedin.com/in/robskillington/" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">Rob Skillington</a> – the CTO of the company – and Martin, acting as CEO. It’s not common to have only engineering founders at a company: my gut feel is that at infrastructure startups, such a setup can make a lot more sense.</p><p>Today, we cover Martin’s story, and then close by offering advice for engineers planning to start up their own company one day – and perhaps also take on the CEO role! Today, we cover:</p><ol><li><p>From learning to code in Australia, to working in Silicon Valley</p></li><li><p>Launching a startup</p></li><li><p>The early days of Chronosphere</p></li><li><p>The need to introduce a career ladder</p></li><li><p>The impact of Uber and future plans</p></li><li><p>Going from developer to CEO</p></li><li><p>Advice for software engineers</p></li><li><p>Appendix: Chronosphere’s 80-page(!) business plan</p></li></ol><figure><a href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F331d8b1f-214a-41fd-81e9-a91c2691f4c1_1412x1426.png" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer"><picture><source type="image/webp" srcset="https://reader.miniflux.app/proxy/dT33EJ0NZyGODH1wrAvXtpoJnp3E5kJEY5TtKlvq1Ak=/aHR0cHM6Ly9zdWJzdGFja2Nkbi5jb20vaW1hZ2UvZmV0Y2gvd180MjQsY19saW1pdCxmX3dlYnAscV9hdXRvOmdvb2QsZmxfcHJvZ3Jlc3NpdmU6c3RlZXAvaHR0cHMlM0ElMkYlMkZzdWJzdGFjay1wb3N0LW1lZGlhLnMzLmFtYXpvbmF3cy5jb20lMkZwdWJsaWMlMkZpbWFnZXMlMkYzMzFkOGIxZi0yMTRhLTQxZmQtODFlOS1hOTFjMjY5MWY0YzFfMTQxMngxNDI2LnBuZw== 424w, https://reader.miniflux.app/proxy/eIyULJaZKrr6gcjO45USnr5HyAbrAWRjBciXWlSZEic=/aHR0cHM6Ly9zdWJzdGFja2Nkbi5jb20vaW1hZ2UvZmV0Y2gvd184NDgsY19saW1pdCxmX3dlYnAscV9hdXRvOmdvb2QsZmxfcHJvZ3Jlc3NpdmU6c3RlZXAvaHR0cHMlM0ElMkYlMkZzdWJzdGFjay1wb3N0LW1lZGlhLnMzLmFtYXpvbmF3cy5jb20lMkZwdWJsaWMlMkZpbWFnZXMlMkYzMzFkOGIxZi0yMTRhLTQxZmQtODFlOS1hOTFjMjY5MWY0YzFfMTQxMngxNDI2LnBuZw== 848w, https://reader.miniflux.app/proxy/4cp3yzeZKydGlKvBlKb2J_tojBXcEXkw4CRCDP-ub8Y=/aHR0cHM6Ly9zdWJzdGFja2Nkbi5jb20vaW1hZ2UvZmV0Y2gvd18xMjcyLGNfbGltaXQsZl93ZWJwLHFfYXV0bzpnb29kLGZsX3Byb2dyZXNzaXZlOnN0ZWVwL2h0dHBzJTNBJTJGJTJGc3Vic3RhY2stcG9zdC1tZWRpYS5zMy5hbWF6b25hd3MuY29tJTJGcHVibGljJTJGaW1hZ2VzJTJGMzMxZDhiMWYtMjE0YS00MWZkLTgxZTktYTkxYzI2OTFmNGMxXzE0MTJ4MTQyNi5wbmc= 1272w, https://reader.miniflux.app/proxy/D3SJfMFFTNIKJ8AusB0F47IHtOnYaN0nDJLdiQkcPaM=/aHR0cHM6Ly9zdWJzdGFja2Nkbi5jb20vaW1hZ2UvZmV0Y2gvd18xNDU2LGNfbGltaXQsZl93ZWJwLHFfYXV0bzpnb29kLGZsX3Byb2dyZXNzaXZlOnN0ZWVwL2h0dHBzJTNBJTJGJTJGc3Vic3RhY2stcG9zdC1tZWRpYS5zMy5hbWF6b25hd3MuY29tJTJGcHVibGljJTJGaW1hZ2VzJTJGMzMxZDhiMWYtMjE0YS00MWZkLTgxZTktYTkxYzI2OTFmNGMxXzE0MTJ4MTQyNi5wbmc= 1456w" sizes="100vw"/><img src="https://reader.miniflux.app/proxy/TRgzNgCZH3BtaWmLlDtfTU4h_IZOPZhxbOSlcOohBWA=/aHR0cHM6Ly9zdWJzdGFja2Nkbi5jb20vaW1hZ2UvZmV0Y2gvd18xNDU2LGNfbGltaXQsZl9hdXRvLHFfYXV0bzpnb29kLGZsX3Byb2dyZXNzaXZlOnN0ZWVwL2h0dHBzJTNBJTJGJTJGc3Vic3RhY2stcG9zdC1tZWRpYS5zMy5hbWF6b25hd3MuY29tJTJGcHVibGljJTJGaW1hZ2VzJTJGMzMxZDhiMWYtMjE0YS00MWZkLTgxZTktYTkxYzI2OTFmNGMxXzE0MTJ4MTQyNi5wbmc=" alt="Some of the stages of how Chronosphere grew, as a tech company" title="Some of the stages of how Chronosphere grew, as a tech company" srcset="https://reader.miniflux.app/proxy/ApheQGcWjN7Nc7gIKIihDJ4PVAzN6SCjzgycQRpJ718=/aHR0cHM6Ly9zdWJzdGFja2Nkbi5jb20vaW1hZ2UvZmV0Y2gvd180MjQsY19saW1pdCxmX2F1dG8scV9hdXRvOmdvb2QsZmxfcHJvZ3Jlc3NpdmU6c3RlZXAvaHR0cHMlM0ElMkYlMkZzdWJzdGFjay1wb3N0LW1lZGlhLnMzLmFtYXpvbmF3cy5jb20lMkZwdWJsaWMlMkZpbWFnZXMlMkYzMzFkOGIxZi0yMTRhLTQxZmQtODFlOS1hOTFjMjY5MWY0YzFfMTQxMngxNDI2LnBuZw== 424w, https://reader.miniflux.app/proxy/dRSHcieE1E-Yh3IFISkSt9fNIGrO3tr2WB_kAF4p1G8=/aHR0cHM6Ly9zdWJzdGFja2Nkbi5jb20vaW1hZ2UvZmV0Y2gvd184NDgsY19saW1pdCxmX2F1dG8scV9hdXRvOmdvb2QsZmxfcHJvZ3Jlc3NpdmU6c3RlZXAvaHR0cHMlM0ElMkYlMkZzdWJzdGFjay1wb3N0LW1lZGlhLnMzLmFtYXpvbmF3cy5jb20lMkZwdWJsaWMlMkZpbWFnZXMlMkYzMzFkOGIxZi0yMTRhLTQxZmQtODFlOS1hOTFjMjY5MWY0YzFfMTQxMngxNDI2LnBuZw== 848w, https://reader.miniflux.app/proxy/7QrfYt3qvs9PvBXUFrcJ84axDK9KwKnJvefKZZDMDpw=/aHR0cHM6Ly9zdWJzdGFja2Nkbi5jb20vaW1hZ2UvZmV0Y2gvd18xMjcyLGNfbGltaXQsZl9hdXRvLHFfYXV0bzpnb29kLGZsX3Byb2dyZXNzaXZlOnN0ZWVwL2h0dHBzJTNBJTJGJTJGc3Vic3RhY2stcG9zdC1tZWRpYS5zMy5hbWF6b25hd3MuY29tJTJGcHVibGljJTJGaW1hZ2VzJTJGMzMxZDhiMWYtMjE0YS00MWZkLTgxZTktYTkxYzI2OTFmNGMxXzE0MTJ4MTQyNi5wbmc= 1272w, https://reader.miniflux.app/proxy/TRgzNgCZH3BtaWmLlDtfTU4h_IZOPZhxbOSlcOohBWA=/aHR0cHM6Ly9zdWJzdGFja2Nkbi5jb20vaW1hZ2UvZmV0Y2gvd18xNDU2LGNfbGltaXQsZl9hdXRvLHFfYXV0bzpnb29kLGZsX3Byb2dyZXNzaXZlOnN0ZWVwL2h0dHBzJTNBJTJGJTJGc3Vic3RhY2stcG9zdC1tZWRpYS5zMy5hbWF6b25hd3MuY29tJTJGcHVibGljJTJGaW1hZ2VzJTJGMzMxZDhiMWYtMjE0YS00MWZkLTgxZTktYTkxYzI2OTFmNGMxXzE0MTJ4MTQyNi5wbmc= 1456w" sizes="100vw" loading="lazy"/></picture></a><figcaption>Some of the stages of how Chronosphere grew, as a tech company</figcaption></figure><p>With this, it’s over to Martin, who tells his story and applicable learnings.</p><h2>1. From learning to code in Australia, to working in Silicon Valley</h2><p>How did I learn to code? In high school, in Australia, <a href="https://www.linkedin.com/in/prashantvaranasi/details/experience/" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">Prashant Varanasi</a> was one of my good friends. He was learning to code, and needed help in a programming competition, because he needed a team of three. He asked for help, and taught me the basics of Visual Basic, so we could enter the competition. And we ended up doing well in it, too! Afterwards, we both won scholarships to college to study computer science. <em>Prashant would later work as a senior software engineer at Google, and a distinguished engineer at Uber, but, of course, back then, I didn’t know this.</em></p><p><strong>In college, I tried my hand at a couple of startups.</strong> I founded a text messaging startup at first. Then, I joined a startup that tried to beat Facebook, and become the #1 social media company in Australia, around 2007. At this social media startup, we put a lot of work into importing your contacts from Microsoft Messenger. But when Facebook entered Australia, they pretty much crushed us.</p><p>After graduating, I began looking for a more serious job. In 2009, the tech scene in Australia was not as vibrant as it is today: Atlassian was still small and Canva didn’t exist. Google was already on the scene, and I interned at the Google office, working on Google Docs. However, Google paid a fraction of what they did in the US, so I set my eyes on the United States.</p><h3>Microsoft</h3><p>In 2009, not many US tech companies were hiring, as the sector was still recovering from the 2008 crash. Microsoft, however, was, and I got an internship to work there. They accepted five interns from Australia, and I was lucky enough to be one of those five.</p><p>When I went to intern there, I thought I would spend three cool months in Seattle, and that would be it. I had no idea you could get offered a full-time job at the end of an internship, until the internship ended and Microsoft came to me, saying, “Oh, hey, here’s your job offer.” It was an offer to stay in Seattle. On top of the option to continue working at Microsoft, it was also the best monetary opportunity as well, so I took it without a second thought.</p><p><strong>I worked on Office 365, as it was born. </strong>I joined the Microsoft Office team but was tasked to work on a new product. My team was taking the Office product distributed on CD ROMs and making it into a SaaS solution. They called it Office 365, and in 2010, this was a really exciting project to work on. We then shipped the first version, and then I felt that it was time to move on.</p><p>See, I was working at Steve Ballmer-era Microsoft. We had a target to hit a two-year release cycle. They let me code full-on for eight weeks, and then told me to stop. I asked what I should be doing next. They said, “It’s now QA time!” </p><p>I tried to push bug fixes, but was told that it was too risky. I was, however, told that I could get those fixes ready for the next release. But the next release was not for another two years’ time!</p><p>After a few years, I thought to myself:</p><blockquote><p>“What am I doing here? I’m not productive at all. I should do something else with my life.”</p></blockquote><h3>Amazon</h3><p>I attribute a lot of things to luck, and how I ended up at Amazon was one of these. My mentor at Microsoft was a senior engineer who had moved over to Amazon and ended up running a part of the EC2 team. This was around 2013, and EC2 was one of the hottest services at Amazon.</p><p>For some reason, Amazon didn’t have any senior engineers on the part of the EC2 team that was responsible for the EC2 instance management, and for the Windows business. The Windows business was itself a billion-dollar business at the time! So my former mentor reached out and asked, “Hey, do you want to be a tech lead on EC2?” I thought about it for a while, and then decided I couldn’t turn down an opportunity like that.</p><p>And it was really interesting to work on EC2. I wrote code for drivers on Windows, and started to put a basic observability system in place. EC2 had no observability system back then: people would spin up EC2 instances but have no idea whether or not they worked. So we took on the challenge of fixing this.</p><p><strong>With my team, we built the basics of what is now called <a href="https://aws.amazon.com/systems-manager/" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">AWS Systems Manager</a></strong>. This was a remote management tool, to do things like:</p><ul><li><p>SSH remotely into machines, via a browser interface</p></li><li><p>Roll out patch updates</p></li><li><p>Manage rolling updates for several machines</p></li></ul><p>We built it, shipped it, and presented it at <a href="https://reinvent.awsevents.com/" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">re:Invent</a> – Amazon’s annual flagship event. It was a lot of fun!</p><p>After a couple of years, it felt to me the mood changed to most teams just wanting to ship new services. The focus seemed to shift to: invent something new → build a service for it → ship it. Once you do this a couple of times – building and shipping a new service – it starts to become easy enough. The discussion I had with people went along the lines of, “Oh, I know what service you want to ship. I know how to do it. It’s not that hard to do, anymore.”</p><p>It was around this time that <a href="https://www.linkedin.com/in/robskillington" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">Rob Skillington</a> – now my cofounder at Chronosphere – called me up and convinced me to join this startup called Uber, and said it would be a crazy ride! </p><h3>Uber</h3><p>The pitch to join Uber wasn’t just the business vision, but also the engineering one. The engineering pitch went something like, “Hey, here’s your chance to come in and work on a system where we don’t use the public cloud; we own our own datacenters, and we get to build infrastructure services that could one day become the size of Google’s infrastructure.” It was a pitch that was hard to say no to!</p><p>I joined in 2015, when there were a couple hundred engineers at Uber, and the infra team was made up of about 50 people.</p><p>Rob was right that Uber would be crazy. It was at Uber where we ended up building <a href="https://m3db.io/" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">M3</a>: Uber’s open source, large-scale metrics platform. <em>We previously covered the building of M3 in the article <a href="https://newsletter.pragmaticengineer.com/p/how-uber-built-its-observability-platform" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">How Uber Built its Observability Platform.</a></em></p><h2>2. Launching a startup</h2><p>At Uber, I felt like we had completed the core mission of M3. We spun up a reliable observability platform, and rolled it out. Virtually every engineer was using the platform. The roadmap, frankly, was not that exciting, compared to the challenges we had to overcome in the past.</p><p>I decided to look around. I looked at both internal and external opportunities. And of course, I also considered building something from scratch.</p><p>In 2019, Uber didn’t have a ton of opportunities, internally. The speed of execution felt slower than it had been in earlier years, and truly hard problems were hard to come by.</p><p>On the other hand, I found the idea of building a company <em>very</em> compelling. We originally built M3 to support Uber’s scale on a microservices/container (cloud native) architecture. It was that very architecture that created the scale, reliability, performance and cost-efficiency challenges. When we built M3, we thought only Uber and a handful of companies in the world would need something like this: such as Google, Facebook and Netflix.</p><p><strong>Kubernetes changed the observability needs of so many companies.</strong> As Kubernetes really picked up in popularity, it was clear the majority of the world’s architecture would look like Uber’s architecture did, and that M3 would be a solution to observability needs. We just so happened to have M3 open sourced – ready to be used in the open, as well. </p><p>We then looked at the competition. No one was in a position to solve this problem! None of the existing vendors had built and optimized for a cloud-native architecture. At scale, pricing was out of hand with all solutions.</p><p>The cloud-native observability market seemed one that would be ripe for disruption. And we just so happened to have the perfect solution, already built and tested at scale. I remember thinking that if we ever wanted to start a company, there would never be a better opportunity from a timing perspective.</p><h3>Finding a cofounder</h3><p>My cofounder is <a href="https://www.linkedin.com/in/robskillington/" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">Rob Skillington</a>. We are both Australian, have known each other for over a decade, and worked together closely for four years at Uber on M3. In fact, he even officiated at my wedding! </p><p><strong>My personal and biased belief is that starting a company with someone you know and trust really helps.</strong> Building a company is hard. There are a lot of tough moments, which might prove to be even tougher with someone you don’t know as well.</p><p>Find someone who’s interested in a different part of the business from you, and someone who brings different skill sets. It’s common to have two engineering technical cofounders, but generally one has to focus more on the business side. In our case, Rob remained technical and I focused on the business.</p><p>Finding one cofounder who is technical and one who’s interested in the business is not as easy as you might think, either, because both founders need to want to enjoy their area. I see so many technical folks that just don&#39;t want to move over to the business side. This is fine, but then you need to go and find a CEO so you can focus on what you love to do!</p><h3>Fundraising</h3><p>Fundraising turned out to be pretty straightforward. Firms like Sequoia and Greylock were reaching out to us, when they heard we were planning to start a company. These VC firms have these scout networks of folks who work in Big Tech whose job it is to look out for interesting tech to invest in: and this was how they found us.</p><p><strong>We put together an 80-page business plan.</strong> This business plan was not really for the investors, but rather, to help us think about the business. In this document, we covered:</p><ul><li><p>The product</p></li><li><p>The market</p></li><li><p>The go-to-market (GTM) plan</p></li><li><p>Our competitors</p></li><li><p>… and many other things!</p></li></ul><p>We worked on a few iterations of this plan, and once it was solidified, this gave us the conviction that we were onto something. With the plan in place, we sent this document – rather than the usual pitch deck – over to the VCs.</p><p>Our approach was unorthodox, but worked! The document answered all the questions they had, and we still did a pitch, of course, with a deck. We ended up pitching to a firm and partner we liked, early on: <a href="https://www.linkedin.com/in/jerrychenprofile/" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">Jerry Chen</a> at Greylock. Jerry gave us a term sheet on the spot, and we took it.</p><p>Launching the company was easier than I imagine many founders have it. After all, we already  had open source technology to use – M3 – and we also had a clear path on what we wanted to build, similar to the roadmap the observability team at Uber used to have. </p><p>When we started out building the company, it felt a little like a continuation of our path from Uber. We were heads down building the product we wished we could have bought.</p><p>Here&#39;s the timeline of our fundraising story since the launch of the company:</p><ul><li><p>May 2019: founding the company</p></li><li><p>Nov 2019: the first round of funding led by Greylock: Series A ($11M)</p></li><li><p>Jan 2021: Series B ($43M)</p></li><li><p>Oct 2021: Series C ($200M)</p></li><li><p>Jan 2022: Series C-1 ($115M)</p></li></ul><p>An interesting bit of history is how the first funding round at most startups is called either a pre-seed, or a seed round. But we didn’t have one of these! We knew what we wanted to build, and knew there was a demand for it, and we had validation from the M3 open source community on the demand. We had the technology ready in the form of the M3 project, which was a massive achievement by itself.</p><p>We needed $11M to get started. When we told Greylock that we were raising $11M, they said that that figure was too large to be called a seed round. Still, we didn’t get hung up on the name. We just called it a Series A.</p><h2>3. The early days of Chronosphere</h2><p>Our vision was to create a hosted observability platform long term. Our MVP was this:</p>
      <p>
          <a href="https://newsletter.pragmaticengineer.com/p/chronosphere" rel="noopener noreferrer" target="_blank" referrerpolicy="no-referrer">
              Read more
          </a>
      </p>
   